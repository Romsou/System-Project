Une synchronisation est nécessaire pour éviter que le thread initial ne puisse sortir du programme (en appelant Halt), alors qu'au moins un thread utilisateur est toujours en activité. la synchronisation du système entre les appels Halt et UserThreadExit se fait d'une manière particulière. Nous disposons d'une liste des threads utilisateur actifs. Lors d'un appel système Halt, nous vérifions si cette liste est vide. Si elle ne l'est pas, on demande au thread courant de s'endormir et on le sauvegarde. Ce thread ne sera alors plus activé jusqu'à un réveil explicite. On passe alors au thread suivant en fonction de l'ordonnacement. A chaque fermeture d'un thread utilisateur par un appel système UserThreadExit, on vérifie si la liste est vide. Si elle l'est, alors on réveille le thread en le placant dans la readyList (avec la fonction Scheduler::ReadyToRun). Une fois fait, ce thread obtient la main sur le processeur puisque qu'il est l'unique thread de la readyList et execute son appel système Halt. 
