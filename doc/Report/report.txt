--- Jour 2

2.2

- Statistics: Gère les statistiques du système: Matériel
- Interrupt: Gestionnaire d'interruption: Matériel 
- Scheduler: L'ordonnanceur processus: Mode noyau
- Timer: Horloge du système: Matériel
- Thread: Mode Noyau

La pile est à NULL car il s'agit du thread principal (pas de pile donc). 
Les registres représentés par un tableau dans thread.h sont initialisés à 0.
Le rôle de la structure de données Thread est de sauvegarder l'état d'un 
processus et de permettre une exécution concurrente des différents threads

2.3 

La variable mainMemory

PCReg dans machine.h = compteur de programme courrant


3.1

(facultatif)
Chaque fois que la méthode Interrupt->Enable() est appellée, le fichier machine/stats.h contient une macro faisant avancer le nombre de ticks
de 10 (macro systemTicks)
Or la fonction Initialize() fait appelle à cette méthode avant que le reste du programme ne se déroule.

3.2

Dans NachOS, les structures de données sont initialisées (principalement à NULL) dans le constructeur de la classe Thread.
La méthode fork() va ensuite alloué la mémoire (la pile plus exactement) nécessaire à notre thread et placer notre thread sur la file de priorité
des threads prêts à être exécutés

En ajoutant un thread dans ThreadTest() le programme compile et fonctionne toujours.

En commentant la ligne currentThread->Yield() on s'apperçoit que l'exécution des threads devient sérielle. On en déduit que la préemption des threads sous 
nachOS est manuelle (comprendre par là qu'il faut explicitement la spécifier dans le code).

En ajoutant l'option -rs <n> on observe un entrelacement des threads différent en fonction de n. 
On observe également une augmentation significative du nombre de tick système. On en déduit que le changement de contexte induit par le changement de threads 
a un coût système d'autant plus élevé que le changement de contexte est fréquent.

3.3 

Lors d'un appel à Yield(), l'ancien niveau d'interruption du thread courrant est sauvegardé.
La méthode met ensuite le thread courrant sur la liste des threads prêts à être exécuter, puis
cherche le prochain thread prêt si elle en trouve effectivement un. En fin de fonction, le niveau d'interruption
est rétabli quelque soit l'issue.

- ReadyToRun: Marque un thread comme étant prêt (setStatus(READY)) et l'ajoute ) la liste des threads prêts
- FindNextToRun: Retourne le prochain thread a être exécuté et le retire de la liste des threads prêts. Sinon retourne NULL
- Run(): Sauvegarde l'état de l'ancien thread et charge celui du nouveau en appellant SWITCH 

La fonction réellement responsable du changement de contexte est SWITCH.
Elle occasionne un changement de contexte simulé au niveau non pas de nachOS mais de la machine hôte.

3.4

En appuyant sur "n" on se retrouve à exécuter le programme pas par pas dans sa globalité (et non pas isolément, par threads).

Il est possible de placer un breakpoint sur scheduler->run dans la méthode Yield pour récupérer la main après chaque changement de contexte.

3.5 

En limitant le nombre de changement de contexte toutes les deux exécutions de Yield, on s'apperçoit que le nombre de tick système diminue

-- Jour 3

Partie I:
Le Makefile à modifier est Makefile.define-user et pas Makefile.define-origin qu'on ne doit pas toucher.

Partie II:

II.1 : Progtests.cc, ConsoleTest, Fonction pour tester le fonctionnement d'une lecture/écriture avec la console sous NachOS.
La console NachOS : Deux parties : L'entrée, le clavier et la sortie, l'écran. Un mécanisme d'interruption est utilisé pour gérer les I/O.
Pour la lecture, une interruption est déclenchée quand un caractère est écrit (quand il y a quelque chose à lire) grace au handler ReadAvail, puis on réalise la lecture avec Console::GetChar().
Pour l'écriture, on poste un requête d'écriture grâce à Console::PutChar(char c) puis on attend d'être averti de la terminaison de la requête grâce au handler writeDone.

C’est une erreur que de chercher à lire un caractère avant d’être averti qu’un caractère est disponible car dans ce cas, on tente demande à lire quelque chose qui n'existe pas encore et qui n'existera peut-etre jamais.

Chercher à écrire avant d’être averti que l’écriture précédente est terminée car on risquerait d'écraser l'écriture en cours ou alors que l'interruption pourrait être envoyée dans le vide et jamais traité puisqu'une autre interruption est déjà en cours.

Partie III:

Les fonctions: SynchPutChar : écrit un caractère sur la sortie standard (ou un fichier donné).
	       SynchGetChar : lit un caractère depuis l'entrée standard (ou un fichier donné).
	       SynchPutString : Prend en paramètre une chaine et appelle SynchPutChar sur chaque caractère de cette chaine pour les écrire.
	       SynchGetString : Prend en paramètre une chaine et un entier reprensentant le nombre de caracère à lire puis lit ces caractère en appelant SynchGetChar et les écrit a l'adresse pointée par la chaine passée en paramètre.
	       
Les tests : SynchConsoleTest appelle TestString qui lit 3 caratère puis TestChar qui lit jusqu'à la fin (EOF). Les caractères lus sont écrits dans un fichier passé en paramètre.

Partie IV:
- Dans Syscall.h, nous avons créé un appel système dédié à PutChar.
- Dans Start.S le code asm de PutChar.
- Dans exception.cc, nous avons ajouter une fonction handler pour appeler SyncPutChar.
- Dans system.cc, on ajoute la synchConsole comme variable globale et on l'initialise (et la libère).
PutChar (= appel système) -> appelle un handler -> appelle SynchPutChar

-- Jour 4

Fonctions réalisées aujourd'hui:
- copyFromMachine()
- PutChar()
- GetChar()
- GetString()
- PutString()
- PutIn()

Correction de bug dans synchconsole:

Synchconsole et console présentait un bug sur l'affichage et la récupération du premier caractère dû à une double instanciation de la classe.
Le problème a été corrigé en retirant l'instanciation incriminée dans synchConsoleTest() et Initialize(). Le problème persiste lorsque l'on utilise consoleTest()
dû à la manière dont SynchConsole et Console y sont instanciés.

Un second bug est survenu en essayant de tester synchConsole sur deux fichiers. La solution a été de sauvegarder les noms des fichiers d'entrées et de sorties passés
en paramètre après -sc dans la boucle d'itération des arguments d'initialize(). Instancier directement synchConsole dans cette boucle occasionnait des crash
dû à la classe Statistics. De cette manière il est possible d'instancier synchConsole après Statistics.

- Partie 6 -

Dans le fichier `test/putchar.c`, fontion `Halt()` commentée : une exception est déclenchée après l'exécution de la fonction `print` de type 1 (-> SyscallException) avec comme code 1. Après l'execution du test, un exception par défaut est levé `handleError()`
Solution 1 est de remplacer `handleError()` par `handleHalt()` comme fonction par défaut.
Solution 2 le faire appeler par __start dans start.S à la place de Exit. `start.S:28: jal   Halt` plutôt que `jal Exit`
<strong>Un peu de doc :</strong>
Une fois la méthode `main` exécutée, il y a un appel système à `Exit` avec 0 comme argument. Cet appel n'est pas obligatoire, il est provoqué sciemment par le système. L'execution du `main()` utilisateur est provoqué par l'appel __start du fichier `test/start.S` (le fichier qui fait le lien entre l'espace utilisateur et le noyau) - le code de cet appel est situé à l'adresse 0, c'est pour cela qu'il débute la séquence d'éxécution. C'est aussi cet appel qui appel Exit, un autre appel systeme défini dans le même fichier.

Pour avoir une fonction de sortie qui permet de lire et renvoyer les données on crée appel système End qui va traiter cette partie et pourra si besoin envoyer un message au processus fils etc.

-- Etape 3

-- Jour 5