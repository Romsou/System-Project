#Step3
###Remarque de Vincent
a remark that can be useful for everybody (step 3, implementing UserThreadCreate)

The nachos code is very old (more than 20 years) and it is not as good written as we could have expected.
In particular, it has been written when 64bits computers do not exists.
And you can find lots of place with cast between (void*) and (int).
It is plainly wrong nowadays: it breaks badly on 64bits architectures.
But nachos is full of this, hence its compilation in x86-32 even now.

So, you are allowed to cast int to void* and reversly in the nachos kernel code.

###Idée de Romain
Note: Pendant l'exécution d'un thread on peut trouver l'emplacement mémoire de sa pile en utilisant machine->readRegister(StackReg)
On peut également lire la mémoire avec readMem
Potentielle idée de génie: Récupérer le pointeur de pile, et décaler les arguments de 4 octets
ça nous permettra de pointer directement sur la fonction
#########################
C'est quoi un thread ? 
Comment on crée un thread ?
Donc un thread c'est un état alternatif d'un processus qui partage le même espace d'adresse mais pas les mêmes registres ou la même pile
Donc quand on créer un thread, il faut absolument initialiser ses registres et sa pile
Quand on change de contexte, il faut également restaurer l'état du thread en restaurant ses registres et sa pile
Donc la partie facile c'est l'état des registres
Nos registres ne contiennent que des offsets relatif à l'espace d'adresse.
La première fois qu'on lance un processus, on met son registre PCReg à 0 car c'est là que se trouve le point de départ du code de l'exécutable
Tout du moins dans l'espace d'adresse
Donc lorsqu'on crée un thread pour la première fois, on a juste besoin d'initialiser correctement ses registres et sa piles
La fonction StackAllocate semble s'occuper de la pile, mais j'ai l'impression qu'elle n'initialise pas le compteur de pile, au contraire de la fonction InitRegisters

Structure de fonction{ int func - int nbArg - unsigned int sizeTab[nbArg] - void argTab[nbArg]} s'inspirer du tp sur pthread

Semaphore de la classe Thread :
Le semaphore est commun à la classe, initialiser avec un nombre de thread defini dans thread.h. Quand on va appeler Halt, on essaie de prendre le verrou (la il faudrait que j'arrive à avoir un moyen de faire un truc plus propre pcq ça peut bloquer)
Mise en place des identifiants pid et ppid pour tenir compte des hiérarchies de processus. Récupérable par getPid() et getPPid(). 